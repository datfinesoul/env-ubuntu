#!/usr/bin/env bash

# full path to this file
SOURCE_FILE="$(readlink -e -- "${BASH_SOURCE[${#BASH_SOURCE[@]} - 1]}")"
# directory of this file
SOURCE_DIR="$(dirname "${SOURCE_FILE}")"

#if [[ "${SCRIPT_NAME}" == 'core.source' ]]; then
#  echo ":: cannot call core.source directly"
#  exit 1
#fi

if [[ "$(id -u)" -eq "0" ]]; then
  echo "please DO NOT run as root";
  exit 1
fi

# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -o errexit
set -o nounset
set -o pipefail
IFS=$'\n\t'

PID=$$
WORKDIR="/tmp/${SCRIPT_NAME}"
LOG="/tmp/${SCRIPT_NAME}.log"

# directory that keeps track of successful installs
CACHE_DIR="${SOURCE_DIR}/cache"
mkdir -p "${CACHE_DIR}"
DONE="${CACHE_DIR}/${SCRIPT_NAME}.done"

# if app was successfully installed it is skipped on re-runs
if [[ "${1:-}" == "--force" ]]; then
  shift
elif [[ -f "${DONE}" ]]; then
  echo ":: ${SCRIPT_NAME}:${PID} skip"
  exit 0
fi

# if we are re-running, delete the previous install working dir
[[ -d "${WORKDIR}" ]] && rm -rf "${WORKDIR}"

# log stdout/stderr to a file and stdout
exec &> >(tee "${LOG}")

function cleanup {
  # shellcheck disable=SC2154
  if [ -n "${1:-}" ]; then
    echo ":: ${SCRIPT_NAME}:${PID} Aborted by ${1:-}"
  elif [ "${status}" -ne 0 ]; then
    echo ":: ${SCRIPT_NAME}:${PID} Failure (status $status)"
  else
    echo ":: ${SCRIPT_NAME}:${PID} Success"
    touch "${DONE}"
  fi
  popd > /dev/null
}
export -f cleanup
trap 'status=$?; cleanup; exit $status' EXIT
trap 'trap - HUP; cleanup SIGHUP; kill -HUP $$' HUP
trap 'trap - INT; cleanup SIGINT; kill -INT $$' INT
trap 'trap - TERM; cleanup SIGTERM; kill -TERM $$' TERM

mkdir -p "${WORKDIR}"
pushd "${WORKDIR}" > /dev/null
